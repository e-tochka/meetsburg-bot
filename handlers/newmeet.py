from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from keyboards import get_main_keyboard, get_password_choice_keyboard, get_confirmation_keyboard
from database import db

router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏
class CreateMeet(StatesGroup):
    waiting_for_title = State()       # –û–∂–∏–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏
    waiting_for_date = State()        # –û–∂–∏–¥–∞–µ–º –¥–∞—Ç—É
    waiting_for_description = State() # –û–∂–∏–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    waiting_for_plan = State()        # –û–∂–∏–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 
    waiting_for_password_choice = State() # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–∞—Ä–æ–ª—è
    waiting_for_password_input = State() # –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è
    waiting_for_confirmation = State() # –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ

@router.message(Command("newmeet"))
@router.message(lambda message: message.text == "üóì –ù–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞")
async def cmd_newmeet(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üóìÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏...\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:",
        reply_markup=None
    )
    await state.set_state(CreateMeet.waiting_for_title)

@router.message(CreateMeet.waiting_for_title)
async def process_meet_title(message: Message, state: FSMContext):
    if message.text in ["‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        await back_to_menu(message, state)
        return
        
    await state.update_data(title=message.text)
    
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: <b>{message.text}</b>\n\n"
        "üìÖ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024):",
        parse_mode="HTML"
    )
    await state.set_state(CreateMeet.waiting_for_date)

@router.message(CreateMeet.waiting_for_date)
async def process_meet_date(message: Message, state: FSMContext):
    if message.text in ["‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        await back_to_menu(message, state)
        return
        
    await state.update_data(date=message.text)
    
    await message.answer(
        f"‚úÖ –î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: <b>{message.text}</b>\n\n"
        "üìã –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:",
        parse_mode="HTML"
    )
    await state.set_state(CreateMeet.waiting_for_description)

@router.message(CreateMeet.waiting_for_description)
async def process_meet_description(message: Message, state: FSMContext):
    if message.text in ["‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        await back_to_menu(message, state)
        return
        
    await state.update_data(description=message.text)
    
    await message.answer(
        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n"
        "üìã –í–≤–µ–¥–∏—Ç–µ –ø–ª–∞–Ω –≤—Å—Ç—Ä–µ—á–∏:\n",
        parse_mode="HTML"
    )
    await state.set_state(CreateMeet.waiting_for_plan)

@router.message(CreateMeet.waiting_for_plan)
async def process_meet_plan(message: Message, state: FSMContext):
    if message.text in ["‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        await back_to_menu(message, state)
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø–ª–∞–Ω–∞
    if message.text.strip() == '-':
        plan = "–ù–µ —É–∫–∞–∑–∞–Ω"
        plan_text = "‚ùå –Ω–µ —É–∫–∞–∑–∞–Ω"
    else:
        plan = message.text.strip()
        plan_text = f"‚úÖ {plan}"
    
    await state.update_data(plan=plan, plan_text=plan_text)
    
    await message.answer(
        f"‚úÖ –ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n\n"
        "üîê –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç—É–ø–∞ –∫ –≤—Å—Ç—Ä–µ—á–µ:",
        reply_markup=get_password_choice_keyboard()
    )
    await state.set_state(CreateMeet.waiting_for_password_choice)

@router.message(CreateMeet.waiting_for_password_choice)
async def process_password_choice(message: Message, state: FSMContext):
    if message.text in ["‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        await back_to_menu(message, state)
        return
        
    if message.text == "üîì –ë–µ–∑ –ø–∞—Ä–æ–ª—è":
        # –ï—Å–ª–∏ –±–µ–∑ –ø–∞—Ä–æ–ª—è - —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        await state.update_data(password=None, password_text="üîì –±–µ–∑ –ø–∞—Ä–æ–ª—è")
        await show_confirmation(message, state)
        
    elif message.text == "üîê –° –ø–∞—Ä–æ–ª–µ–º":
        # –ï—Å–ª–∏ —Å –ø–∞—Ä–æ–ª–µ–º - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è
        await message.answer(
            "üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")]],
                resize_keyboard=True
            )
        )
        await state.set_state(CreateMeet.waiting_for_password_input)
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:",
            reply_markup=get_password_choice_keyboard()
        )

@router.message(CreateMeet.waiting_for_password_input)
async def process_password_input(message: Message, state: FSMContext):
    if message.text in ["‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        await back_to_menu(message, state)
        return
        
    password = message.text.strip()
    if not password:
        await message.answer(
            "‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:"
        )
        return
    
    await state.update_data(password=password, password_text=f"üîê {password}")
    await show_confirmation(message, state)

async def show_confirmation(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    meet_info = (
        "üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏:</b>\n\n"
        f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['title']}\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {data['date']}\n"
        f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description']}\n"
        f"üìã <b>–ü–ª–∞–Ω:</b> {data['plan_text']}\n"
        f"üîê <b>–ü–∞—Ä–æ–ª—å:</b> {data['password_text']}\n\n"
        "<b>–í—Å—ë –≤–µ—Ä–Ω–æ?</b>"
    )
    
    await message.answer(meet_info, parse_mode="HTML", reply_markup=get_confirmation_keyboard())
    await state.set_state(CreateMeet.waiting_for_confirmation)

@router.message(CreateMeet.waiting_for_confirmation)
async def process_confirmation(message: Message, state: FSMContext):
    if message.text in ["‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        await back_to_menu(message, state)
        return
        
    if message.text == "‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—Ç—Ä–µ—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        meet_id = await db.add_meet(
            user_id=message.from_user.id,
            title=data['title'],
            date=data['date'],
            description=data['description'],
            plan=data['plan'],
            password=data.get('password')
        )
        
        if meet_id:
            await message.answer(
                f"üéâ –í—Å—Ç—Ä–µ—á–∞ <b>¬´{data['title']}¬ª</b> —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ!",
                parse_mode="HTML",
                reply_markup=get_main_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
        
        await state.clear()
        
    elif message.text == "‚ùå –ù–µ—Ç, –∏—Å–ø—Ä–∞–≤–∏—Ç—å":
        await message.answer(
            "‚ùå –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –∑–∞–Ω–æ–≤–æ.\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:",
            reply_markup=None
        )
        await state.set_state(CreateMeet.waiting_for_title)
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:",
            reply_markup=get_confirmation_keyboard()
        )

# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def back_to_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é"
@router.message(lambda message: message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
async def back_to_menu_handler(message: Message, state: FSMContext):
    await back_to_menu(message, state)